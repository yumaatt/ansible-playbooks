- name: install anyenv
  git: repo=https://github.com/riywo/anyenv dest=~/.anyenv update=no
  become: yes
  become_user: "{{ item.user }}"
  with_items: "{{ user_data }}"

- name: anyenv plugins directory
  file: path=~/.anyenv/plugins state=directory mode=0775
  become: yes
  become_user: "{{ item.user }}"
  with_items: "{{ user_data }}"

- name: anyenv plugins
  git: repo=https://github.com/znz/{{ item.1 }}.git dest=~/.anyenv/plugins/{{ item.1 }} update=no
  become: yes
  become_user: "{{ item.0.user }}"
  with_nested:
    - "{{ user_data }}"
    - "{{ anyenv_plugins }}"

- name: anyenv envs directory
  file: path=~/.anyenv/envs state=directory mode=0775
  become: yes
  become_user: "{{ item.user }}"
  with_items: "{{ user_data }}"

- name: anyenv install envs
  command: creates=~/.anyenv/envs/{{ item.1 }} ~/.anyenv/bin/anyenv install {{ item.1 }}
  become: yes
  become_user: "{{ item.0.user }}"
  with_nested:
    - "{{ user_data }}"
    - "{{ anyenv }}"

- name: install python
  shell: |
    eval "$(~/.anyenv/bin/anyenv init -)"
    ~/.anyenv/envs/pyenv/bin/pyenv install {{ item.1 }}
    ~/.anyenv/envs/pyenv/bin/pyenv rehash
    executable=/bin/bash
    creates=~/.anyenv/envs/pyenv/versions/{{ item.1 }}
  become: yes
  become_user: "{{ item.0.user }}"
  with_subelements:
    - "{{ pyenv }}"
    - python_versions

- name: set python version
  shell: |
    eval "$(~/.anyenv/bin/anyenv init -)"
    ~/.anyenv/envs/pyenv/bin/pyenv global {{ item.python_version }}
    executable=/bin/bash
  changed_when: no
  become: yes
  become_user: "{{ item.user }}"
  with_items: "{{ pyenv }}"

- name: install ruby
  shell: |
    eval "$(~/.anyenv/bin/anyenv init -)"
    ~/.anyenv/envs/rbenv/bin/rbenv install {{ item.1 }}
    ~/.anyenv/envs/rbenv/bin/rbenv rehash
    executable=/bin/bash
    creates=~/.anyenv/envs/rbenv/versions/{{ item.1 }}
  become: yes
  become_user: "{{ item.0.user }}"
  with_subelements:
    - "{{ rbenv }}"
    - ruby_versions

- name: set ruby version
  shell: |
    eval "$(~/.anyenv/bin/anyenv init -)"
    ~/.anyenv/envs/rbenv/bin/rbenv global {{ item.ruby_version }}
    executable=/bin/bash
  changed_when: no
  become: yes
  become_user: "{{ item.user }}"
  with_items: "{{ rbenv }}"

- name: install perl
  shell: |
    eval "$(~/.anyenv/bin/anyenv init -)"
    ~/.anyenv/envs/plenv/bin/plenv install {{ item.1 }}
    ~/.anyenv/envs/plenv/bin/plenv rehash
    executable=/bin/bash
    creates=~/.anyenv/envs/plenv/versions/{{ item.1 }}
  become: yes
  become_user: "{{ item.0.user }}"
  with_subelements:
    - "{{ plenv }}"
    - perl_versions

- name: set perl version
  shell: |
    eval "$(~/.anyenv/bin/anyenv init -)"
    ~/.anyenv/envs/plenv/bin/plenv global {{ item.perl_version }}
    executable=/bin/bash
  changed_when: no
  become: yes
  become_user: "{{ item.user }}"
  with_items: "{{ plenv }}"

- name: install node
  shell: |
    eval "$(~/.anyenv/bin/anyenv init -)"
    ~/.anyenv/envs/nodenv/bin/nodenv install {{ item.1 }}
    ~/.anyenv/envs/nodenv/bin/nodenv rehash
    executable=/bin/bash
    creates=~/.anyenv/envs/nodenv/versions/{{ item.1 }}
  become: yes
  become_user: "{{ item.0.user }}"
  with_subelements:
    - "{{ nodenv }}"
    - node_versions

- name: set node version
  shell: |
    eval "$(~/.anyenv/bin/anyenv init -)"
    ~/.anyenv/envs/nodenv/bin/nodenv global {{ item.node_version }}
    executable=/bin/bash
  changed_when: no
  become: yes
  become_user: "{{ item.user }}"
  with_items: "{{ nodenv }}"

- name: install go
  shell: |
    eval "$(~/.anyenv/bin/anyenv init -)"
    ~/.anyenv/envs/goenv/bin/goenv install {{ item.1 }}
    ~/.anyenv/envs/goenv/bin/goenv rehash
    executable=/bin/bash
    creates=~/.anyenv/envs/goenv/versions/{{ item.1 }}
  become: yes
  become_user: "{{ item.0.user }}"
  with_subelements:
    - "{{ goenv }}"
    - go_versions

- name: set go version
  shell: |
    eval "$(~/.anyenv/bin/anyenv init -)"
    ~/.anyenv/envs/goenv/bin/goenv global {{ item.go_version }}
    executable=/bin/bash
  changed_when: no
  become: yes
  become_user: "{{ item.user }}"
  with_items: "{{ goenv }}"

- name: check gem
  stat: path=~/.anyenv/envs/rbenv/shims/gem
  register: check_gem

- name: install gems
  gem: name="{{ item.1 }}" executable=~/.anyenv/envs/rbenv/shims/gem user_install=no
  become: yes
  become_user: "{{ item.0.user }}"
  when: check_gem.stat.exists
  with_subelements:
    - "{{ gems }}"
    - gem_list

- name: install cpanm
  shell: |
    eval "$(~/.anyenv/bin/anyenv init -)"
    ~/.anyenv/envs/plenv/bin/plenv install-cpanm
    ~/.anyenv/envs/plenv/bin/plenv rehash
    executable=/bin/bash
    creates=~/.anyenv/envs/plenv/shims/cpanm
  become: yes
  become_user: "{{ item.user }}"
  with_items: "{{ user_data }}"

- name: cpanm Carton
  command: creates=~/.anyenv/envs/plenv/shims/carton ~/.anyenv/envs/plenv/shims/cpanm Carton
  become: yes
  become_user: "{{ item.user }}"
  with_items: "{{ user_data }}"

- name: upgrade pip
  shell: |
    cd ~/
    ~/.anyenv/envs/pyenv/shims/pip install --upgrade pip
  register: result
  changed_when: '"Requirement already up-to-date" not in result.stdout'
  become: yes
  become_user: "{{ item.user }}"
  with_items: "{{ user_data }}"

- name: check pip
  stat: path=~/.anyenv/envs/pyenv/shims/pip
  register: check_pip

- name: install python packages
  pip: name="{{ item.1 }}" executable=~/.anyenv/envs/pyenv/shims/pip chdir=~/.ghq/github.com/yumaatt/ansible-playbooks
  become: yes
  become_user: "{{ item.0.user }}"
  when: check_pip.stat.exists
  with_subelements:
    - "{{ python_packages }}"
    - package_list
